// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Indexers -->Generic Indexer resource. When possible use a specific resource instead.
 * For more information refer to [Indexer](https://wiki.servarr.com/sonarr/settings#indexers) documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarr from "@maienm/pulumi-sonarr";
 *
 * const example = new sonarr.indexers.Indexer("example", {
 *     apiPath: "/api",
 *     baseUrl: "https://lolo.sickbeard.com",
 *     categories: [
 *         5030,
 *         5040,
 *     ],
 *     configContract: "NewznabSettings",
 *     enableAutomaticSearch: true,
 *     implementation: "Newznab",
 *     name: "Example",
 *     protocol: "usenet",
 *     tags: [
 *         1,
 *         2,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import sonarr:Indexers/indexer:Indexer example 1
 * ```
 */
export class Indexer extends pulumi.CustomResource {
    /**
     * Get an existing Indexer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IndexerState, opts?: pulumi.CustomResourceOptions): Indexer {
        return new Indexer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sonarr:Indexers/indexer:Indexer';

    /**
     * Returns true if the given object is an instance of Indexer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Indexer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Indexer.__pulumiType;
    }

    /**
     * Additional parameters.
     */
    public readonly additionalParameters!: pulumi.Output<string>;
    /**
     * Allow zero size files.
     */
    public readonly allowZeroSize!: pulumi.Output<boolean>;
    /**
     * Anime categories list.
     */
    public readonly animeCategories!: pulumi.Output<number[]>;
    /**
     * Search anime in standard format.
     */
    public readonly animeStandardFormatSearch!: pulumi.Output<boolean>;
    /**
     * API key.
     */
    public readonly apiKey!: pulumi.Output<string>;
    /**
     * API path.
     */
    public readonly apiPath!: pulumi.Output<string>;
    /**
     * Base URL.
     */
    public readonly baseUrl!: pulumi.Output<string>;
    /**
     * Captcha token.
     */
    public readonly captchaToken!: pulumi.Output<string>;
    /**
     * Categories list.
     */
    public readonly categories!: pulumi.Output<number[]>;
    /**
     * Indexer configuration template.
     */
    public readonly configContract!: pulumi.Output<string>;
    /**
     * Cookie.
     */
    public readonly cookie!: pulumi.Output<string>;
    /**
     * Delay before grabbing.
     */
    public readonly delay!: pulumi.Output<number>;
    /**
     * Download client ID.
     */
    public readonly downloadClientId!: pulumi.Output<number>;
    /**
     * Enable automatic search flag.
     */
    public readonly enableAutomaticSearch!: pulumi.Output<boolean>;
    /**
     * Enable interactive search flag.
     */
    public readonly enableInteractiveSearch!: pulumi.Output<boolean>;
    /**
     * Enable RSS flag.
     */
    public readonly enableRss!: pulumi.Output<boolean>;
    /**
     * Indexer implementation name.
     */
    public readonly implementation!: pulumi.Output<string>;
    /**
     * Minimum seeders.
     */
    public readonly minimumSeeders!: pulumi.Output<number>;
    /**
     * Indexer name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Passkey.
     */
    public readonly passkey!: pulumi.Output<string>;
    /**
     * Priority.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Protocol. Valid values are 'usenet' and 'torrent'.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Allow ranked only.
     */
    public readonly rankedOnly!: pulumi.Output<boolean>;
    /**
     * Season seed time.
     */
    public readonly seasonPackSeedTime!: pulumi.Output<number>;
    /**
     * Seed ratio.
     */
    public readonly seedRatio!: pulumi.Output<number>;
    /**
     * Seed time.
     */
    public readonly seedTime!: pulumi.Output<number>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;
    /**
     * Username.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a Indexer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IndexerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IndexerArgs | IndexerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IndexerState | undefined;
            resourceInputs["additionalParameters"] = state ? state.additionalParameters : undefined;
            resourceInputs["allowZeroSize"] = state ? state.allowZeroSize : undefined;
            resourceInputs["animeCategories"] = state ? state.animeCategories : undefined;
            resourceInputs["animeStandardFormatSearch"] = state ? state.animeStandardFormatSearch : undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["apiPath"] = state ? state.apiPath : undefined;
            resourceInputs["baseUrl"] = state ? state.baseUrl : undefined;
            resourceInputs["captchaToken"] = state ? state.captchaToken : undefined;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["configContract"] = state ? state.configContract : undefined;
            resourceInputs["cookie"] = state ? state.cookie : undefined;
            resourceInputs["delay"] = state ? state.delay : undefined;
            resourceInputs["downloadClientId"] = state ? state.downloadClientId : undefined;
            resourceInputs["enableAutomaticSearch"] = state ? state.enableAutomaticSearch : undefined;
            resourceInputs["enableInteractiveSearch"] = state ? state.enableInteractiveSearch : undefined;
            resourceInputs["enableRss"] = state ? state.enableRss : undefined;
            resourceInputs["implementation"] = state ? state.implementation : undefined;
            resourceInputs["minimumSeeders"] = state ? state.minimumSeeders : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passkey"] = state ? state.passkey : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["rankedOnly"] = state ? state.rankedOnly : undefined;
            resourceInputs["seasonPackSeedTime"] = state ? state.seasonPackSeedTime : undefined;
            resourceInputs["seedRatio"] = state ? state.seedRatio : undefined;
            resourceInputs["seedTime"] = state ? state.seedTime : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as IndexerArgs | undefined;
            if ((!args || args.configContract === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configContract'");
            }
            if ((!args || args.implementation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'implementation'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["additionalParameters"] = args ? args.additionalParameters : undefined;
            resourceInputs["allowZeroSize"] = args ? args.allowZeroSize : undefined;
            resourceInputs["animeCategories"] = args ? args.animeCategories : undefined;
            resourceInputs["animeStandardFormatSearch"] = args ? args.animeStandardFormatSearch : undefined;
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["apiPath"] = args ? args.apiPath : undefined;
            resourceInputs["baseUrl"] = args ? args.baseUrl : undefined;
            resourceInputs["captchaToken"] = args ? args.captchaToken : undefined;
            resourceInputs["categories"] = args ? args.categories : undefined;
            resourceInputs["configContract"] = args ? args.configContract : undefined;
            resourceInputs["cookie"] = args ? args.cookie : undefined;
            resourceInputs["delay"] = args ? args.delay : undefined;
            resourceInputs["downloadClientId"] = args ? args.downloadClientId : undefined;
            resourceInputs["enableAutomaticSearch"] = args ? args.enableAutomaticSearch : undefined;
            resourceInputs["enableInteractiveSearch"] = args ? args.enableInteractiveSearch : undefined;
            resourceInputs["enableRss"] = args ? args.enableRss : undefined;
            resourceInputs["implementation"] = args ? args.implementation : undefined;
            resourceInputs["minimumSeeders"] = args ? args.minimumSeeders : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passkey"] = args?.passkey ? pulumi.secret(args.passkey) : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["rankedOnly"] = args ? args.rankedOnly : undefined;
            resourceInputs["seasonPackSeedTime"] = args ? args.seasonPackSeedTime : undefined;
            resourceInputs["seedRatio"] = args ? args.seedRatio : undefined;
            resourceInputs["seedTime"] = args ? args.seedTime : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey", "passkey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Indexer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Indexer resources.
 */
export interface IndexerState {
    /**
     * Additional parameters.
     */
    additionalParameters?: pulumi.Input<string>;
    /**
     * Allow zero size files.
     */
    allowZeroSize?: pulumi.Input<boolean>;
    /**
     * Anime categories list.
     */
    animeCategories?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Search anime in standard format.
     */
    animeStandardFormatSearch?: pulumi.Input<boolean>;
    /**
     * API key.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * API path.
     */
    apiPath?: pulumi.Input<string>;
    /**
     * Base URL.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * Captcha token.
     */
    captchaToken?: pulumi.Input<string>;
    /**
     * Categories list.
     */
    categories?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Indexer configuration template.
     */
    configContract?: pulumi.Input<string>;
    /**
     * Cookie.
     */
    cookie?: pulumi.Input<string>;
    /**
     * Delay before grabbing.
     */
    delay?: pulumi.Input<number>;
    /**
     * Download client ID.
     */
    downloadClientId?: pulumi.Input<number>;
    /**
     * Enable automatic search flag.
     */
    enableAutomaticSearch?: pulumi.Input<boolean>;
    /**
     * Enable interactive search flag.
     */
    enableInteractiveSearch?: pulumi.Input<boolean>;
    /**
     * Enable RSS flag.
     */
    enableRss?: pulumi.Input<boolean>;
    /**
     * Indexer implementation name.
     */
    implementation?: pulumi.Input<string>;
    /**
     * Minimum seeders.
     */
    minimumSeeders?: pulumi.Input<number>;
    /**
     * Indexer name.
     */
    name?: pulumi.Input<string>;
    /**
     * Passkey.
     */
    passkey?: pulumi.Input<string>;
    /**
     * Priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Protocol. Valid values are 'usenet' and 'torrent'.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Allow ranked only.
     */
    rankedOnly?: pulumi.Input<boolean>;
    /**
     * Season seed time.
     */
    seasonPackSeedTime?: pulumi.Input<number>;
    /**
     * Seed ratio.
     */
    seedRatio?: pulumi.Input<number>;
    /**
     * Seed time.
     */
    seedTime?: pulumi.Input<number>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Username.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Indexer resource.
 */
export interface IndexerArgs {
    /**
     * Additional parameters.
     */
    additionalParameters?: pulumi.Input<string>;
    /**
     * Allow zero size files.
     */
    allowZeroSize?: pulumi.Input<boolean>;
    /**
     * Anime categories list.
     */
    animeCategories?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Search anime in standard format.
     */
    animeStandardFormatSearch?: pulumi.Input<boolean>;
    /**
     * API key.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * API path.
     */
    apiPath?: pulumi.Input<string>;
    /**
     * Base URL.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * Captcha token.
     */
    captchaToken?: pulumi.Input<string>;
    /**
     * Categories list.
     */
    categories?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Indexer configuration template.
     */
    configContract: pulumi.Input<string>;
    /**
     * Cookie.
     */
    cookie?: pulumi.Input<string>;
    /**
     * Delay before grabbing.
     */
    delay?: pulumi.Input<number>;
    /**
     * Download client ID.
     */
    downloadClientId?: pulumi.Input<number>;
    /**
     * Enable automatic search flag.
     */
    enableAutomaticSearch?: pulumi.Input<boolean>;
    /**
     * Enable interactive search flag.
     */
    enableInteractiveSearch?: pulumi.Input<boolean>;
    /**
     * Enable RSS flag.
     */
    enableRss?: pulumi.Input<boolean>;
    /**
     * Indexer implementation name.
     */
    implementation: pulumi.Input<string>;
    /**
     * Minimum seeders.
     */
    minimumSeeders?: pulumi.Input<number>;
    /**
     * Indexer name.
     */
    name: pulumi.Input<string>;
    /**
     * Passkey.
     */
    passkey?: pulumi.Input<string>;
    /**
     * Priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Protocol. Valid values are 'usenet' and 'torrent'.
     */
    protocol: pulumi.Input<string>;
    /**
     * Allow ranked only.
     */
    rankedOnly?: pulumi.Input<boolean>;
    /**
     * Season seed time.
     */
    seasonPackSeedTime?: pulumi.Input<number>;
    /**
     * Seed ratio.
     */
    seedRatio?: pulumi.Input<number>;
    /**
     * Seed time.
     */
    seedTime?: pulumi.Input<number>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Username.
     */
    username?: pulumi.Input<string>;
}
