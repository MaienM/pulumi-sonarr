// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Media Management -->Naming resource.
 * For more information refer to [Naming](https://wiki.servarr.com/sonarr/settings#community-naming-suggestions) documentation.
 *
 * ## Import
 *
 * import does not need parameters
 *
 * ```sh
 *  $ pulumi import sonarr:MediaManagement/naming:Naming example
 * ```
 */
export class Naming extends pulumi.CustomResource {
    /**
     * Get an existing Naming resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamingState, opts?: pulumi.CustomResourceOptions): Naming {
        return new Naming(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sonarr:MediaManagement/naming:Naming';

    /**
     * Returns true if the given object is an instance of Naming.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Naming {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Naming.__pulumiType;
    }

    /**
     * Anime episode format.
     */
    public readonly animeEpisodeFormat!: pulumi.Output<string>;
    /**
     * Colon replacement format. 0 - 'Delete' 1 - 'Replace with Dash' 2 - 'Replace with Space Dash' 3 - 'Replace with Space Dash Space' 4 - 'Smart Replace'.
     */
    public readonly colonReplacementFormat!: pulumi.Output<number>;
    /**
     * Daily episode format.
     */
    public readonly dailyEpisodeFormat!: pulumi.Output<string>;
    /**
     * Multi episode style. 0 - 'Extend' 1 - 'Duplicate' 2 - 'Repeat' 3 - 'Scene' 4 - 'Range' 5 - 'Prefixed Range'.
     */
    public readonly multiEpisodeStyle!: pulumi.Output<number>;
    /**
     * Sonarr will use the existing file name if false.
     */
    public readonly renameEpisodes!: pulumi.Output<boolean>;
    /**
     * Replace illegal characters. They will be removed if false.
     */
    public readonly replaceIllegalCharacters!: pulumi.Output<boolean>;
    /**
     * Season folder format.
     */
    public readonly seasonFolderFormat!: pulumi.Output<string>;
    /**
     * Series folder format.
     */
    public readonly seriesFolderFormat!: pulumi.Output<string>;
    /**
     * Special folder format.
     */
    public readonly specialsFolderFormat!: pulumi.Output<string>;
    /**
     * Standard episode formatss.
     */
    public readonly standardEpisodeFormat!: pulumi.Output<string>;

    /**
     * Create a Naming resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamingArgs | NamingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamingState | undefined;
            resourceInputs["animeEpisodeFormat"] = state ? state.animeEpisodeFormat : undefined;
            resourceInputs["colonReplacementFormat"] = state ? state.colonReplacementFormat : undefined;
            resourceInputs["dailyEpisodeFormat"] = state ? state.dailyEpisodeFormat : undefined;
            resourceInputs["multiEpisodeStyle"] = state ? state.multiEpisodeStyle : undefined;
            resourceInputs["renameEpisodes"] = state ? state.renameEpisodes : undefined;
            resourceInputs["replaceIllegalCharacters"] = state ? state.replaceIllegalCharacters : undefined;
            resourceInputs["seasonFolderFormat"] = state ? state.seasonFolderFormat : undefined;
            resourceInputs["seriesFolderFormat"] = state ? state.seriesFolderFormat : undefined;
            resourceInputs["specialsFolderFormat"] = state ? state.specialsFolderFormat : undefined;
            resourceInputs["standardEpisodeFormat"] = state ? state.standardEpisodeFormat : undefined;
        } else {
            const args = argsOrState as NamingArgs | undefined;
            if ((!args || args.animeEpisodeFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'animeEpisodeFormat'");
            }
            if ((!args || args.colonReplacementFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'colonReplacementFormat'");
            }
            if ((!args || args.dailyEpisodeFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dailyEpisodeFormat'");
            }
            if ((!args || args.multiEpisodeStyle === undefined) && !opts.urn) {
                throw new Error("Missing required property 'multiEpisodeStyle'");
            }
            if ((!args || args.renameEpisodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'renameEpisodes'");
            }
            if ((!args || args.replaceIllegalCharacters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replaceIllegalCharacters'");
            }
            if ((!args || args.seasonFolderFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'seasonFolderFormat'");
            }
            if ((!args || args.seriesFolderFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'seriesFolderFormat'");
            }
            if ((!args || args.specialsFolderFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'specialsFolderFormat'");
            }
            if ((!args || args.standardEpisodeFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'standardEpisodeFormat'");
            }
            resourceInputs["animeEpisodeFormat"] = args ? args.animeEpisodeFormat : undefined;
            resourceInputs["colonReplacementFormat"] = args ? args.colonReplacementFormat : undefined;
            resourceInputs["dailyEpisodeFormat"] = args ? args.dailyEpisodeFormat : undefined;
            resourceInputs["multiEpisodeStyle"] = args ? args.multiEpisodeStyle : undefined;
            resourceInputs["renameEpisodes"] = args ? args.renameEpisodes : undefined;
            resourceInputs["replaceIllegalCharacters"] = args ? args.replaceIllegalCharacters : undefined;
            resourceInputs["seasonFolderFormat"] = args ? args.seasonFolderFormat : undefined;
            resourceInputs["seriesFolderFormat"] = args ? args.seriesFolderFormat : undefined;
            resourceInputs["specialsFolderFormat"] = args ? args.specialsFolderFormat : undefined;
            resourceInputs["standardEpisodeFormat"] = args ? args.standardEpisodeFormat : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Naming.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Naming resources.
 */
export interface NamingState {
    /**
     * Anime episode format.
     */
    animeEpisodeFormat?: pulumi.Input<string>;
    /**
     * Colon replacement format. 0 - 'Delete' 1 - 'Replace with Dash' 2 - 'Replace with Space Dash' 3 - 'Replace with Space Dash Space' 4 - 'Smart Replace'.
     */
    colonReplacementFormat?: pulumi.Input<number>;
    /**
     * Daily episode format.
     */
    dailyEpisodeFormat?: pulumi.Input<string>;
    /**
     * Multi episode style. 0 - 'Extend' 1 - 'Duplicate' 2 - 'Repeat' 3 - 'Scene' 4 - 'Range' 5 - 'Prefixed Range'.
     */
    multiEpisodeStyle?: pulumi.Input<number>;
    /**
     * Sonarr will use the existing file name if false.
     */
    renameEpisodes?: pulumi.Input<boolean>;
    /**
     * Replace illegal characters. They will be removed if false.
     */
    replaceIllegalCharacters?: pulumi.Input<boolean>;
    /**
     * Season folder format.
     */
    seasonFolderFormat?: pulumi.Input<string>;
    /**
     * Series folder format.
     */
    seriesFolderFormat?: pulumi.Input<string>;
    /**
     * Special folder format.
     */
    specialsFolderFormat?: pulumi.Input<string>;
    /**
     * Standard episode formatss.
     */
    standardEpisodeFormat?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Naming resource.
 */
export interface NamingArgs {
    /**
     * Anime episode format.
     */
    animeEpisodeFormat: pulumi.Input<string>;
    /**
     * Colon replacement format. 0 - 'Delete' 1 - 'Replace with Dash' 2 - 'Replace with Space Dash' 3 - 'Replace with Space Dash Space' 4 - 'Smart Replace'.
     */
    colonReplacementFormat: pulumi.Input<number>;
    /**
     * Daily episode format.
     */
    dailyEpisodeFormat: pulumi.Input<string>;
    /**
     * Multi episode style. 0 - 'Extend' 1 - 'Duplicate' 2 - 'Repeat' 3 - 'Scene' 4 - 'Range' 5 - 'Prefixed Range'.
     */
    multiEpisodeStyle: pulumi.Input<number>;
    /**
     * Sonarr will use the existing file name if false.
     */
    renameEpisodes: pulumi.Input<boolean>;
    /**
     * Replace illegal characters. They will be removed if false.
     */
    replaceIllegalCharacters: pulumi.Input<boolean>;
    /**
     * Season folder format.
     */
    seasonFolderFormat: pulumi.Input<string>;
    /**
     * Series folder format.
     */
    seriesFolderFormat: pulumi.Input<string>;
    /**
     * Special folder format.
     */
    specialsFolderFormat: pulumi.Input<string>;
    /**
     * Standard episode formatss.
     */
    standardEpisodeFormat: pulumi.Input<string>;
}
