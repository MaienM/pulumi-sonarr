// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Notifications -->Single Notification.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarr from "@pulumi/sonarr";
 *
 * const example = sonarr.Notifications.getNotification({
 *     name: "Example",
 * });
 * ```
 */
export function getNotification(args: GetNotificationArgs, opts?: pulumi.InvokeOptions): Promise<GetNotificationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sonarr:Notifications/getNotification:getNotification", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getNotification.
 */
export interface GetNotificationArgs {
    /**
     * Notification name.
     */
    name: string;
}

/**
 * A collection of values returned by getNotification.
 */
export interface GetNotificationResult {
    /**
     * Access token.
     */
    readonly accessToken: string;
    /**
     * Access token secret.
     */
    readonly accessTokenSecret: string;
    /**
     * Always update flag.
     */
    readonly alwaysUpdate: boolean;
    /**
     * API key.
     */
    readonly apiKey: string;
    /**
     * App token.
     */
    readonly appToken: string;
    /**
     * Arguments.
     */
    readonly arguments: string;
    /**
     * Password.
     */
    readonly authPassword: string;
    /**
     * Auth token.
     */
    readonly authToken: string;
    /**
     * Auth user.
     */
    readonly authUser: string;
    /**
     * Username.
     */
    readonly authUsername: string;
    /**
     * Author.
     */
    readonly author: string;
    /**
     * Avatar.
     */
    readonly avatar: string;
    /**
     * Bcc.
     */
    readonly bccs: string[];
    /**
     * Bot token.
     */
    readonly botToken: string;
    /**
     * Cc.
     */
    readonly ccs: string[];
    /**
     * Channel.
     */
    readonly channel: string;
    /**
     * Channel tags.
     */
    readonly channelTags: string[];
    /**
     * Chat ID.
     */
    readonly chatId: string;
    /**
     * Clean library flag.
     */
    readonly cleanLibrary: boolean;
    /**
     * Click URL.
     */
    readonly clickUrl: string;
    /**
     * Notification configuration template.
     */
    readonly configContract: string;
    /**
     * Configuration key.
     */
    readonly configurationKey: string;
    /**
     * Consumer key.
     */
    readonly consumerKey: string;
    /**
     * Consumer secret.
     */
    readonly consumerSecret: string;
    /**
     * Device IDs.
     */
    readonly deviceIds: string[];
    /**
     * Device names.
     */
    readonly deviceNames: string;
    /**
     * Devices.
     */
    readonly devices: string[];
    /**
     * Direct message flag.
     */
    readonly directMessage: boolean;
    /**
     * Display time.
     */
    readonly displayTime: number;
    /**
     * Event.
     */
    readonly event: string;
    /**
     * Expire.
     */
    readonly expire: number;
    /**
     * Expires.
     */
    readonly expires: string;
    /**
     * Tags and emojis.
     */
    readonly fieldTags: string[];
    /**
     * From.
     */
    readonly from: string;
    /**
     * Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart.
     */
    readonly grabFields: number[];
    /**
     * Host.
     */
    readonly host: string;
    /**
     * Icon.
     */
    readonly icon: string;
    /**
     * Notification ID.
     */
    readonly id: number;
    /**
     * Notification implementation name.
     */
    readonly implementation: string;
    /**
     * Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.
     */
    readonly importFields: number[];
    /**
     * Include health warnings.
     */
    readonly includeHealthWarnings: boolean;
    /**
     * Key.
     */
    readonly key: string;
    /**
     * Mention.
     */
    readonly mention: string;
    /**
     * Method. `1` POST, `2` PUT.
     */
    readonly method: number;
    /**
     * Notification name.
     */
    readonly name: string;
    /**
     * Notification type. `0` Info, `1` Success, `2` Warning, `3` Failure.
     */
    readonly notificationType: number;
    /**
     * Notify flag.
     */
    readonly notify: boolean;
    /**
     * On application update flag.
     */
    readonly onApplicationUpdate: boolean;
    /**
     * On download flag.
     */
    readonly onDownload: boolean;
    /**
     * On episode file delete flag.
     */
    readonly onEpisodeFileDelete: boolean;
    /**
     * On episode file delete for upgrade flag.
     */
    readonly onEpisodeFileDeleteForUpgrade: boolean;
    /**
     * On grab flag.
     */
    readonly onGrab: boolean;
    /**
     * On health issue flag.
     */
    readonly onHealthIssue: boolean;
    /**
     * On health restored flag.
     */
    readonly onHealthRestored: boolean;
    /**
     * On manual interaction required flag.
     */
    readonly onManualInteractionRequired: boolean;
    /**
     * On rename flag.
     */
    readonly onRename: boolean;
    /**
     * On series add flag.
     */
    readonly onSeriesAdd: boolean;
    /**
     * On series delete flag.
     */
    readonly onSeriesDelete: boolean;
    /**
     * On upgrade flag.
     */
    readonly onUpgrade: boolean;
    /**
     * password.
     */
    readonly password: string;
    /**
     * Path.
     */
    readonly path: string;
    /**
     * Port.
     */
    readonly port: number;
    /**
     * Priority.
     */
    readonly priority: number;
    /**
     * Receiver ID.
     */
    readonly receiverId: string;
    /**
     * Recipients.
     */
    readonly recipients: string[];
    /**
     * Refresh token.
     */
    readonly refreshToken: string;
    /**
     * Require encryption flag.
     */
    readonly requireEncryption: boolean;
    /**
     * Retry.
     */
    readonly retry: number;
    /**
     * Add silently flag.
     */
    readonly sendSilently: boolean;
    /**
     * Sender domain.
     */
    readonly senderDomain: string;
    /**
     * Sender ID.
     */
    readonly senderId: string;
    /**
     * Sender Number.
     */
    readonly senderNumber: string;
    /**
     * server.
     */
    readonly server: string;
    /**
     * Server URL.
     */
    readonly serverUrl: string;
    /**
     * Sign in.
     */
    readonly signIn: string;
    /**
     * Sound.
     */
    readonly sound: string;
    /**
     * Stateless URLs.
     */
    readonly statelessUrls: string;
    /**
     * List of associated tags.
     */
    readonly tags: number[];
    /**
     * Token.
     */
    readonly token: string;
    /**
     * Topics.
     */
    readonly topics: string[];
    /**
     * To.
     */
    readonly tos: string[];
    /**
     * Update library flag.
     */
    readonly updateLibrary: boolean;
    /**
     * URL.
     */
    readonly url: string;
    /**
     * Use EU endpoint flag.
     */
    readonly useEuEndpoint: boolean;
    /**
     * Use SSL flag.
     */
    readonly useSsl: boolean;
    /**
     * User key.
     */
    readonly userKey: string;
    /**
     * Username.
     */
    readonly username: string;
    /**
     * Web hook url.
     */
    readonly webHookUrl: string;
}
/**
 * <!-- subcategory:Notifications -->Single Notification.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarr from "@pulumi/sonarr";
 *
 * const example = sonarr.Notifications.getNotification({
 *     name: "Example",
 * });
 * ```
 */
export function getNotificationOutput(args: GetNotificationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNotificationResult> {
    return pulumi.output(args).apply((a: any) => getNotification(a, opts))
}

/**
 * A collection of arguments for invoking getNotification.
 */
export interface GetNotificationOutputArgs {
    /**
     * Notification name.
     */
    name: pulumi.Input<string>;
}
