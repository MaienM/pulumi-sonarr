// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Profiles -->Release Profile resource.
 * For more information refer to [Release Profiles](https://wiki.servarr.com/sonarr/settings#release-profiles) documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarr from "@maienm/pulumi-sonarr";
 *
 * const example = new sonarr.profiles.ReleaseProfile("example", {
 *     enabled: true,
 *     ignoreds: ["repack"],
 *     indexerId: 1,
 *     name: "Example",
 *     requireds: ["proper"],
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import sonarr:Profiles/releaseProfile:ReleaseProfile example 10
 * ```
 */
export class ReleaseProfile extends pulumi.CustomResource {
    /**
     * Get an existing ReleaseProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReleaseProfileState, opts?: pulumi.CustomResourceOptions): ReleaseProfile {
        return new ReleaseProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sonarr:Profiles/releaseProfile:ReleaseProfile';

    /**
     * Returns true if the given object is an instance of ReleaseProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReleaseProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReleaseProfile.__pulumiType;
    }

    /**
     * Enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Ignored terms. At least one of `required` and `ignored` must be set.
     */
    public readonly ignoreds!: pulumi.Output<string[]>;
    /**
     * Indexer ID. Default to all.
     */
    public readonly indexerId!: pulumi.Output<number>;
    /**
     * Release profile name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Required terms. At least one of `required` and `ignored` must be set.
     */
    public readonly requireds!: pulumi.Output<string[]>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;

    /**
     * Create a ReleaseProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ReleaseProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReleaseProfileArgs | ReleaseProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReleaseProfileState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ignoreds"] = state ? state.ignoreds : undefined;
            resourceInputs["indexerId"] = state ? state.indexerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["requireds"] = state ? state.requireds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ReleaseProfileArgs | undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ignoreds"] = args ? args.ignoreds : undefined;
            resourceInputs["indexerId"] = args ? args.indexerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requireds"] = args ? args.requireds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReleaseProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReleaseProfile resources.
 */
export interface ReleaseProfileState {
    /**
     * Enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Ignored terms. At least one of `required` and `ignored` must be set.
     */
    ignoreds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indexer ID. Default to all.
     */
    indexerId?: pulumi.Input<number>;
    /**
     * Release profile name.
     */
    name?: pulumi.Input<string>;
    /**
     * Required terms. At least one of `required` and `ignored` must be set.
     */
    requireds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a ReleaseProfile resource.
 */
export interface ReleaseProfileArgs {
    /**
     * Enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Ignored terms. At least one of `required` and `ignored` must be set.
     */
    ignoreds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indexer ID. Default to all.
     */
    indexerId?: pulumi.Input<number>;
    /**
     * Release profile name.
     */
    name?: pulumi.Input<string>;
    /**
     * Required terms. At least one of `required` and `ignored` must be set.
     */
    requireds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
}
