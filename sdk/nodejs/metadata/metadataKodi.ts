// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Metadata -->Metadata Kodi resource.
 * For more information refer to [Metadata](https://wiki.servarr.com/sonarr/settings#metadata) and [KODI](https://wiki.servarr.com/sonarr/supported#xbmcmetadata).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarr from "@maienm/pulumi-sonarr";
 *
 * const example = new sonarr.metadata.MetadataKodi("example", {
 *     enable: true,
 *     episodeImages: true,
 *     episodeMetadata: false,
 *     name: "Example",
 *     seasonImages: true,
 *     seriesImages: true,
 *     seriesMetadata: true,
 *     seriesMetadataUrl: false,
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import sonarr:Metadata/metadataKodi:MetadataKodi example 1
 * ```
 */
export class MetadataKodi extends pulumi.CustomResource {
    /**
     * Get an existing MetadataKodi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetadataKodiState, opts?: pulumi.CustomResourceOptions): MetadataKodi {
        return new MetadataKodi(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sonarr:Metadata/metadataKodi:MetadataKodi';

    /**
     * Returns true if the given object is an instance of MetadataKodi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetadataKodi {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetadataKodi.__pulumiType;
    }

    /**
     * Enable flag.
     */
    public readonly enable!: pulumi.Output<boolean>;
    /**
     * Episode images flag.
     */
    public readonly episodeImages!: pulumi.Output<boolean>;
    /**
     * Episode metadata flag.
     */
    public readonly episodeMetadata!: pulumi.Output<boolean>;
    /**
     * Metadata name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Season images flag.
     */
    public readonly seasonImages!: pulumi.Output<boolean>;
    /**
     * Series images flag.
     */
    public readonly seriesImages!: pulumi.Output<boolean>;
    /**
     * Series metadata flag.
     */
    public readonly seriesMetadata!: pulumi.Output<boolean>;
    /**
     * Series metadata URL flag.
     */
    public readonly seriesMetadataUrl!: pulumi.Output<boolean>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;

    /**
     * Create a MetadataKodi resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetadataKodiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetadataKodiArgs | MetadataKodiState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetadataKodiState | undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["episodeImages"] = state ? state.episodeImages : undefined;
            resourceInputs["episodeMetadata"] = state ? state.episodeMetadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["seasonImages"] = state ? state.seasonImages : undefined;
            resourceInputs["seriesImages"] = state ? state.seriesImages : undefined;
            resourceInputs["seriesMetadata"] = state ? state.seriesMetadata : undefined;
            resourceInputs["seriesMetadataUrl"] = state ? state.seriesMetadataUrl : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as MetadataKodiArgs | undefined;
            if ((!args || args.episodeImages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'episodeImages'");
            }
            if ((!args || args.episodeMetadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'episodeMetadata'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.seasonImages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'seasonImages'");
            }
            if ((!args || args.seriesImages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'seriesImages'");
            }
            if ((!args || args.seriesMetadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'seriesMetadata'");
            }
            if ((!args || args.seriesMetadataUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'seriesMetadataUrl'");
            }
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["episodeImages"] = args ? args.episodeImages : undefined;
            resourceInputs["episodeMetadata"] = args ? args.episodeMetadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["seasonImages"] = args ? args.seasonImages : undefined;
            resourceInputs["seriesImages"] = args ? args.seriesImages : undefined;
            resourceInputs["seriesMetadata"] = args ? args.seriesMetadata : undefined;
            resourceInputs["seriesMetadataUrl"] = args ? args.seriesMetadataUrl : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetadataKodi.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetadataKodi resources.
 */
export interface MetadataKodiState {
    /**
     * Enable flag.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Episode images flag.
     */
    episodeImages?: pulumi.Input<boolean>;
    /**
     * Episode metadata flag.
     */
    episodeMetadata?: pulumi.Input<boolean>;
    /**
     * Metadata name.
     */
    name?: pulumi.Input<string>;
    /**
     * Season images flag.
     */
    seasonImages?: pulumi.Input<boolean>;
    /**
     * Series images flag.
     */
    seriesImages?: pulumi.Input<boolean>;
    /**
     * Series metadata flag.
     */
    seriesMetadata?: pulumi.Input<boolean>;
    /**
     * Series metadata URL flag.
     */
    seriesMetadataUrl?: pulumi.Input<boolean>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a MetadataKodi resource.
 */
export interface MetadataKodiArgs {
    /**
     * Enable flag.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Episode images flag.
     */
    episodeImages: pulumi.Input<boolean>;
    /**
     * Episode metadata flag.
     */
    episodeMetadata: pulumi.Input<boolean>;
    /**
     * Metadata name.
     */
    name: pulumi.Input<string>;
    /**
     * Season images flag.
     */
    seasonImages: pulumi.Input<boolean>;
    /**
     * Series images flag.
     */
    seriesImages: pulumi.Input<boolean>;
    /**
     * Series metadata flag.
     */
    seriesMetadata: pulumi.Input<boolean>;
    /**
     * Series metadata URL flag.
     */
    seriesMetadataUrl: pulumi.Input<boolean>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
}
