// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Series -->Series resource.
 * For more information refer to [Series](https://wiki.servarr.com/sonarr/library#series) documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarr from "@maienm/pulumi-sonarr";
 *
 * const example = new sonarr.series.Series("example", {
 *     monitored: true,
 *     path: "/tmp/breaking_bad",
 *     qualityProfileId: 1,
 *     rootFolderPath: "/tmp/",
 *     seasonFolder: true,
 *     tags: [1],
 *     title: "Breaking Bad",
 *     titleSlug: "breaking-bad",
 *     tvdbId: 81189,
 *     useSceneNumbering: false,
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import sonarr:Series/series:Series example 10
 * ```
 */
export class Series extends pulumi.CustomResource {
    /**
     * Get an existing Series resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SeriesState, opts?: pulumi.CustomResourceOptions): Series {
        return new Series(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sonarr:Series/series:Series';

    /**
     * Returns true if the given object is an instance of Series.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Series {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Series.__pulumiType;
    }

    /**
     * Monitored flag.
     */
    public readonly monitored!: pulumi.Output<boolean>;
    /**
     * Series Path.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Quality Profile ID.
     */
    public readonly qualityProfileId!: pulumi.Output<number>;
    /**
     * Series Root Folder.
     */
    public readonly rootFolderPath!: pulumi.Output<string>;
    /**
     * Season Folder flag.
     */
    public readonly seasonFolder!: pulumi.Output<boolean>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;
    /**
     * Series Title.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Series Title in kebab format.
     */
    public readonly titleSlug!: pulumi.Output<string>;
    /**
     * TVDB ID.
     */
    public readonly tvdbId!: pulumi.Output<number>;
    /**
     * Scene numbering flag.
     */
    public readonly useSceneNumbering!: pulumi.Output<boolean>;

    /**
     * Create a Series resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SeriesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SeriesArgs | SeriesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SeriesState | undefined;
            resourceInputs["monitored"] = state ? state.monitored : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["qualityProfileId"] = state ? state.qualityProfileId : undefined;
            resourceInputs["rootFolderPath"] = state ? state.rootFolderPath : undefined;
            resourceInputs["seasonFolder"] = state ? state.seasonFolder : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["titleSlug"] = state ? state.titleSlug : undefined;
            resourceInputs["tvdbId"] = state ? state.tvdbId : undefined;
            resourceInputs["useSceneNumbering"] = state ? state.useSceneNumbering : undefined;
        } else {
            const args = argsOrState as SeriesArgs | undefined;
            if ((!args || args.monitored === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitored'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.qualityProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'qualityProfileId'");
            }
            if ((!args || args.rootFolderPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootFolderPath'");
            }
            if ((!args || args.seasonFolder === undefined) && !opts.urn) {
                throw new Error("Missing required property 'seasonFolder'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.titleSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'titleSlug'");
            }
            if ((!args || args.tvdbId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tvdbId'");
            }
            if ((!args || args.useSceneNumbering === undefined) && !opts.urn) {
                throw new Error("Missing required property 'useSceneNumbering'");
            }
            resourceInputs["monitored"] = args ? args.monitored : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["qualityProfileId"] = args ? args.qualityProfileId : undefined;
            resourceInputs["rootFolderPath"] = args ? args.rootFolderPath : undefined;
            resourceInputs["seasonFolder"] = args ? args.seasonFolder : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["titleSlug"] = args ? args.titleSlug : undefined;
            resourceInputs["tvdbId"] = args ? args.tvdbId : undefined;
            resourceInputs["useSceneNumbering"] = args ? args.useSceneNumbering : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Series.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Series resources.
 */
export interface SeriesState {
    /**
     * Monitored flag.
     */
    monitored?: pulumi.Input<boolean>;
    /**
     * Series Path.
     */
    path?: pulumi.Input<string>;
    /**
     * Quality Profile ID.
     */
    qualityProfileId?: pulumi.Input<number>;
    /**
     * Series Root Folder.
     */
    rootFolderPath?: pulumi.Input<string>;
    /**
     * Season Folder flag.
     */
    seasonFolder?: pulumi.Input<boolean>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Series Title.
     */
    title?: pulumi.Input<string>;
    /**
     * Series Title in kebab format.
     */
    titleSlug?: pulumi.Input<string>;
    /**
     * TVDB ID.
     */
    tvdbId?: pulumi.Input<number>;
    /**
     * Scene numbering flag.
     */
    useSceneNumbering?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Series resource.
 */
export interface SeriesArgs {
    /**
     * Monitored flag.
     */
    monitored: pulumi.Input<boolean>;
    /**
     * Series Path.
     */
    path: pulumi.Input<string>;
    /**
     * Quality Profile ID.
     */
    qualityProfileId: pulumi.Input<number>;
    /**
     * Series Root Folder.
     */
    rootFolderPath: pulumi.Input<string>;
    /**
     * Season Folder flag.
     */
    seasonFolder: pulumi.Input<boolean>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Series Title.
     */
    title: pulumi.Input<string>;
    /**
     * Series Title in kebab format.
     */
    titleSlug: pulumi.Input<string>;
    /**
     * TVDB ID.
     */
    tvdbId: pulumi.Input<number>;
    /**
     * Scene numbering flag.
     */
    useSceneNumbering: pulumi.Input<boolean>;
}
